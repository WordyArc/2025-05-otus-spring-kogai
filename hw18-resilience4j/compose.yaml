name: library-service

services:
  app:
    build:
      context: .
      target: runtime
    container_name: library-service-app
    #image: hw17-docker:0.1.0
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      TZ: UTC

      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${DB_NAME:-library}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-library}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-library}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      LOG_DIR: ${LOG_DIR:-/app/logs}
      LOG_FILE: ${LOG_FILE:-application.log}

      MANAGEMENT_SERVER_PORT: 8081
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus,logfile,loggers,threaddump,httptrace
    volumes:
      - ./app/logs:/app/logs:rw
    depends_on:
      db:
        condition: service_healthy
        restart: true
    healthcheck:
      test: [ "CMD-SHELL", "bash -c 'timeout 5 bash -c \":> /dev/tcp/127.0.0.1/8080\"'" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks: [ backend, monitoring ]

  db:
    image: postgres:18-bookworm
    container_name: library-service-db
    environment:
      POSTGRES_DB: ${DB_NAME:-library}
      POSTGRES_USER: ${DB_USER:-library}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-library}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost || exit 1"]
      interval: 10s
      start_period: 30s
      retries: 5
      timeout: 5s
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks: [ backend ]

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: library-service-pgadmin
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: unless-stopped
    networks: [ backend ]

  prometheus:
    image: prom/prometheus:v3.6.0
    container_name: library-service-prometheus
    command:
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      app:
        condition: service_started
    restart: unless-stopped
    networks: [ monitoring ]

  grafana:
    image: grafana/grafana:12.2.0-ubuntu
    container_name: library-service-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_DEFAULT_THEME: system
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
    networks: [ monitoring ]

networks:
  backend:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  db-data:
  pgadmin-data:
  prometheus-data:
  grafana-data: